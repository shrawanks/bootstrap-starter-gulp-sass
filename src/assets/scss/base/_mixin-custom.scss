// put your custom mixin code here

 
 // ratio thumbnail       

@mixin responsive-ratio($x,$y, $pseudo: false) {
    $padding: unquote( ( $y / $x ) * 100 + '%' );
    @if $pseudo {
        &:before {
            @include pseudo($pos: relative);
            width: 100%;
            padding-top: $padding;
        }
    } @else {
        padding-top: $padding;
    }
}

 
//  div {
//     @include responsive-ratio(16,9);
// }
 





 // triangle    

@mixin arrow ($direction, $size, $color) {
	@if $direction == up {
		border-left: $size solid transparent;
		border-right: $size solid transparent;
		border-bottom: $size solid $color;
	} @else if $direction == down {
		border-left: $size solid transparent;
		border-right: $size solid transparent;
		border-top: $size solid $color;
	} @else if $direction == right {
		border-top: $size solid transparent;
		border-bottom: $size solid transparent;
		border-left: $size solid $color;
	} @else if $direction == left {
		border-top: $size solid transparent;
		border-bottom: $size solid transparent;
		border-right:$size solid $color;
	}
}
 
//   .read-more { 
// 		&:before {
// 			@include arrow (right, 3px, black);
// 		}
// }
 


 
// margin padding top, right, bottom left   
 
 

@mixin spacer($properties, $axis, $value){
	@if $axis==x {
		#{$properties}-left:$value;
		#{$properties}-right:$value;
	}
	@else if $axis==y {
		#{$properties}-top:$value;
		#{$properties}-bottom:$value;
	}
	 
}
 

 //example
 // .class {
 // 	@include spacer(padding, x, 15px)
 // }

//before and after mixin 
@mixin pseudo($display: block, $pos: absolute, $content: ''){
    content: $content;
    display: $display;
    position: $pos;
}

// example
// div::after {
//     @include pseudo;
//     top: -1rem; left: -1rem;
//     width: 1rem; height: 1rem;
// }



//position mixin
@mixin position($position, $args: ()) {
  $offsets: top right bottom left;
  position: $position;

  @each $offset in $offsets {
     $index: index($args, $offset);

// If offset is found in the list
@if $index {
  // If it is found at last position
  @if $index == length($args) {
    #{$offset}: 0;
  }

  // If it is followed by a value
  @else {
    $next: nth($args, $index + 1);

    // If the next value is value length
    @if is-valid-length($next) {
      #{$offset}: $next;
    }

    // If the next value is another offset
    @else if index($offsets, $next) {
      #{$offset}: 0;
    }

    // If it is invalid
    @else {
      @warn "Invalid value `#{$next}` for offset `#{$offset}`.";
    }
  }
}
  }
}

// Function checking if $value is a valid length
// ---
// @param [literal] $value: value to test
// ---
// @return [bool]

@function is-valid-length($value) {
  @return (type-of($value) == "number" and not unitless($value)) 
       or (index(auto initial inherit 0, $value) != false);
}
 

@mixin absolute($args: ()) {
  @include position(absolute, $args);
}

@mixin fixed($args: ()) {
  @include position(fixed, $args);
}

@mixin relative($args: ()) {
  @include position(relative, $args);
}

// example 
// .a {
//   @include absolute();
// }
// .a {
//   position: absolute;
// }


// .b {
//   @include absolute(top);
// }

// .b {
//   position: absolute;
//   top: 0;
// }

// .c {
//   @include absolute(top right);
// }

// .c {
//   position: absolute;
//   top: 0;
//   right: 0;
// }

// .d {
//   @include absolute(top right bottom);
// }

// .d {
//   position: absolute;
//   top: 0;
//   right: 0;
//   bottom: 0;
// }

// .g {
//   @include absolute(top 1em right);
// }

// .g {
//   position: absolute;
//   top: 1em;
//   right: 0;
// }

// .h {
//   @include absolute(top 1em right 100%);
// }

// .h {
//   position: absolute;
//   top: 1em;
//   right: 100%;
// }

// .j {
//   @include absolute(top 1em right 1em bottom 1em left 1em);
// }

// .j {
//   position: absolute;
//   top: 1em;
//   right: 1em;
//   bottom: 1em;
//   left: 1em;
// }



@mixin placeholder-color($color) {
  &::-webkit-input-placeholder { /* WebKit browsers */
      color: $color;
  }
  &:-moz-placeholder { /* Mozilla Firefox 4 to 18 */
      color: $color;
  }
  &::-moz-placeholder { /* Mozilla Firefox 19+ */
      color: $color;
  }
  &:-ms-input-placeholder { /* Internet Explorer 10+ */
      color: $color;
  }
}



//photoshop line height convert to css
@mixin line-height($fontsize, $lineheight ){

     line-height:$lineheight/$fontsize;
      margin-top: (($lineheight - $fontsize)/2 * -1) + px;
}
//example:
//@include line-height(22,30);


//photoshop letterspacing convert to css
@mixin letter-spacing($letterspacing) {
    letter-spacing: ($letterspacing/1000) * 1em;
}